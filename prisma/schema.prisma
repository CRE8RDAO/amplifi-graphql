generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  address       String    @id
  twitterHandle String?
  discordHandle String?
  referrer      Referrer?
  referee       Referee[] // a user can be referred to multiple campaigns
  payouts       Payout[]
}

model Referrer {
  address  String    @id
  user     User      @relation(fields: [address], references: [address])
  referred Referee[]
}

model Referee {
  id         String            @id @default(uuid())
  address    String
  user       User              @relation(fields: [address], references: [address])
  referrerAddress String
  referrer   Referrer          @relation(fields: [referrerAddress], references: [address])
  campaignId String
  campaign   Campaign          @relation(fields: [campaignId], references: [id])
  action     CompletedAction[]
}

model Protocol {
  id             String @id
  name           String
  logo           String
  primaryColor   String
  secondaryColor String
  social         String
  emoji          String
  baseUrl        String
}

model Campaign {
  id             String          @id @default(uuid())
  //protocol-campaign
  slug           String          @unique 
  referee        Referee[]
  allowedActions AllowedAction[]
  payouts Payout[]
}

model CompletedAction {
  id              String        @id
  refereeId       String
  referee         Referee       @relation(fields: [refereeId], references: [id])
  allowedActionId String
  allowedAction   AllowedAction @relation(fields: [allowedActionId], references: [id])
}

model AllowedAction {
  id               String            @id @default(uuid())
  description      String
  completedActions CompletedAction[]
  campaignId       String
  campaign         Campaign          @relation(fields: [campaignId], references: [id])
}

model Payout {
  id          String        @id @default(uuid())
  status      String
  creation    DateTime @default(now())
  expiration  DateTime?
  tokens      PayoutToken[]
  userAddress String
  User        User          @relation(fields: [userAddress], references: [address])
  campaignId String
  campaign Campaign @relation(fields: [campaignId], references: [id])
}

model PayoutToken {
  id       String  @id @default(uuid())
  payoutId String
  payout   Payout  @relation(fields: [payoutId], references: [id])
  tokenId  String
  token    Token   @relation(fields: [tokenId], references: [id])
  amountUSD Decimal?  //payment as USD paid in token
  amountNum   String? //payment as number of tokens
}

model Token {
  id          String        @id @default(uuid())
  symbol      String
  name        String
  address     String
  decimals    Int
  chainId     Int
  PayoutToken PayoutToken[]
}
